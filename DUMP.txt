// fetch('http://localhost:3000/contacts',{
//   method: "POST",
//   headers: {
//     'Content-type': 'application/json'
//   }

// handleSubmit = e => {
//   e.preventDefault();
//   // this.validateFields();
//   let data = {
//     name: this.state.name,
//     age: this.state.age,
//     occupation: this.state.occupation,
//     email: this.state.email
//   };
//   this.setState({ data });
//   console.log("Form Data Submitted => ", data);
//   e.target.reset();
// };
//let clearData = this.state;
// n: this.state.name,
// a: this.state.age,
// o: this.state.occupation,
// em: this.state.email

// const { n, a, o, em } = clearData;
//this.setState({ clearData });
//console.log(clearData);
// axios
//   .post("http://localhost:5000/contacts", {
//     data
//   })
//   .then(res => console.log(res))
//   .catch(err => {
//     console.log("Error => ", err);
//   });

//     case "age":
//       ageValidation = !Number(value);
//       fieldValidation.age = ageValidation ? "" : "Must be a number";
//       break;
//     case "occupation":
//       occupationValidation = value.length < 5;
//       fieldValidation.occupation = occupationValidation
//         ? ""
//         : "Must be at least 5 characters long";
//       break;
//     case "email":
//       emailValidation = value.match(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/);
//       fieldValidation.email = emailValidation ? "" : "Invalid email";
//       break;
//     default:
//       break;
//   }
//   this.setState(
//     {
//       formErrors: fieldValidation,
//       nameValidation,
//       ageValidation,
//       occupationValidation,
//       emailValidation
//     },
//     this.validateForm
//   );
// }
// validateForm = () => {
//   const { nameValid, emailValid, occupationValid, ageValid } = this.state;
//   this.setState({
//     formValid: nameValid && emailValid && occupationValid && ageValid
//   });
// };

// const p = [...this.state.people];
// const pi = this.state.fields;
// const fieldErrors = this.validateFields(pi);
// this.setState({ fieldErrors });
// if (Object.keys(fieldErrors).length) return;
// this.setState({
//   p: p.concat(pi),
//   fields: {
//     name: ""
//   }
// });
//  console.log(pi);
